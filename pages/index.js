import Head from "next/head";
import { useState, useEffect } from "react";
import CurrencyStyles from "../styles/Currency.module.scss";
import bankapi from "./components/bankapi";
import renderTable from "./components/helpFunctions/renderTable";

export default function Home(props) {
  const [currentCurrency, setCurrentCurrency] = useState("usd");
  const [currentCurrencyData, setCurrentCurrencyData] = useState();
  const [tableType, setTableType] = useState("A");
  const [tableAData, setTableAData] = useState();
  const [tableBData, setTableBData] = useState();
  const [tableCData, setTableCData] = useState();


  useEffect(() => {
    const axiosCall = async () => {
      const res = await bankapi.get(
        `./exchangerates/rates/${tableType}/${currentCurrency}/`
      );
      const data = res.data;
      setCurrentCurrencyData(data);
    };
    if (currentCurrency && tableType) {
      axiosCall();
    } else console.log("Enter proper request");
    return () => {};
  }, [currentCurrency, tableType]);
  
  const handleCurrencyChange = (e) => {
    setCurrentCurrency(e.target.value);
  };
  const handleTableTypeChange = (e) => {
    setTableType(e.target.value.toUpperCase());
  };
  useEffect(() => {
    setTableAData(props.fullTableA[0].rates);
    setTableBData(props.fullTableB[0].rates);
    setTableCData(props.fullTableC[0].rates);
    return () => {};
  }, []);
  const renderCurrencyCodes = (tableType) => {
    switch (tableType) {
      case "A":
        return tableAData.map((cur) => {
          return <option key={cur.name} value={cur.code}></option>;
        });
      case "B":
        return tableBData.map((cur) => {
          return <option key={cur.name} value={cur.code}></option>;
        });
      case "C":
        return tableCData.map((cur) => {
          return <option key={cur.name} value={cur.code}></option>;
        });
    }
  };

  return (
    <div>
      <Head>
        <title>Currency converter by NextDenis</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={CurrencyStyles.currencyinfo}>
        <div className={CurrencyStyles.inputs}>
          <label for="currencyInput"><b>Currency</b></label>
          <input
            id="currencyInput"
            list="currency"
            onChange={(event) => handleCurrencyChange(event)}
          />
          <datalist id="currency">
            {tableAData ? renderCurrencyCodes(tableType) : "loading"}
          </datalist>
          <label for="tableType"><b>Table type</b></label>
          <input
            id="tableType"
            list="tabletype"
            onChange={(event) => handleTableTypeChange(event)}
          />
          <datalist id="tabletype">
            <option value="a"></option>
            <option value="b"></option>
            <option value="c"></option>
          </datalist>
        </div>

        <p>
          Currency name:{" "}
          {currentCurrencyData
            ? currentCurrencyData.currency
            : props.data.currency
            ? props.data.currency
            : "Loading.."}
        </p>
        <p>
          Currency code:{" "}
          {currentCurrencyData
            ? currentCurrencyData.code
            : props.data.code
            ? props.data.code
            : "Loading.."}
        </p>
        <div>
          <p>
            Effective date:{" "}
            {currentCurrencyData
              ? currentCurrencyData.rates[0].effectiveDate
              : props.data.rates[0].effectiveDate
              ? props.data.rates[0].effectiveDate
              : "Loading.."}
          </p>
          <p>
            Rate:{" "}
            <b>
              {currentCurrencyData
                ? currentCurrencyData.rates[0].mid
                : props.data.rates[0].mid
                ? props.data.rates[0].mid
                : "Loading.."}
            </b>
          </p>
          <p>No: {props.data.rates[0].no}</p>
        </div>
      </div>
      <div className={CurrencyStyles.tables}>
        
        <div>{renderTable(props.fullTableA[0])}</div>
        <div>{renderTable(props.fullTableB[0])}</div>
        <div>{renderTable(props.fullTableC[0])}</div>
      </div>
    </div>
  );
}
export async function getStaticProps() {
  try {
    const res = await bankapi.get(`./exchangerates/rates/a/usd/`);
    const data = res.data;
    console.log("res", data);
    const fullresA = await bankapi.get("./exchangerates/tables/a");
    const dataA = fullresA.data;
    const fullresB = await bankapi.get("./exchangerates/tables/b");
    const dataB = fullresB.data;
    const fullresC = await bankapi.get("./exchangerates/tables/c");
    const dataC = fullresC.data;
    return {
      props: {
        data: data,
        fullTableA: dataA,
        fullTableB: dataB,
        fullTableC: dataC,
      },
    };
  } catch (error) {
    console.log(error);
  }
}
